searchNodes=[{"doc":"EslNews works as an aggeregator for Hacker News stories, fetching data from the HN API for further analysis or consumption. Documentation for EslNews is available at https://sdrew.github.io/esl-news/ Documentation for the HN API is available at https://github.com/HackerNews/API Basic Features Fetch the 50 top stories every 5 minutes. Makes stories available via two public APIs JSON over HTTP JSON over WebSockets EslNews tries to make use of the fewest external dependencies, without being too inconvenient. Public APIs /api/stories The endpoint accepts pagination parameters for the most recent list of stories. page - Default: 1 per - Default: 10 /api/stories/[:story_id] Display JSON for a single story /api/ws The WebSockets endpoint delivers the most recent 50 stories. The list is re-sent to the client every 20 seconds, including any story updates. Storage EslNews requires no external storage, all stories are stored in memory using :mnesia . Web server EslNews provides a webserver directly using :cowboy , and includes a simple Javascript WebSockets client to display stories on the homepage ( / ) for testing. Workers EslNews.Http.SyncLists will update the list of story IDs using the HN API every 5 minutes. It will then push these story IDs into a processing queue for EslNews.Http.SyncItems EslNews.Http.SyncItems will update each story using the HN API. Existing stories will not be re-fetched. Multiple workers will be spawned by the supervisor depending on MIX_ENV :dev 4 workers :prod 10 workers Supervision Tree","ref":"EslNews.html","title":"EslNews","type":"module"},{"doc":"EslNews.Application sets up a :cowboy HTTP webserver, the main Supervisor for the EslNews.Http.SyncLists and EslNews.Http.SyncItems workers, and for EslNews.Store.Schema which handles the :mnesia storage.","ref":"EslNews.Application.html","title":"EslNews.Application","type":"module"},{"doc":"Supervisor children specs for EslNews.Store.Schema , EslNews.Http.SyncItems , and EslNews.Http.SyncLists . Always run Store.Schema Avoid running other children in :test environment.","ref":"EslNews.Application.html#children/1","title":"EslNews.Application.children/1","type":"function"},{"doc":"Initialize :cowboy webserver using EslNews.Router and start the application Supervisor","ref":"EslNews.Application.html#start/2","title":"EslNews.Application.start/2","type":"function"},{"doc":"EslNews.Handler provides a standard base implementing the :cowboy_rest behaviour and URI param extraction for EslNews.Handlers","ref":"EslNews.Handler.html","title":"EslNews.Handler","type":"behaviour"},{"doc":"","ref":"EslNews.Handler.html#c:allowed_methods/2","title":"EslNews.Handler.allowed_methods/2","type":"callback"},{"doc":"","ref":"EslNews.Handler.html#c:content_types_provided/2","title":"EslNews.Handler.content_types_provided/2","type":"callback"},{"doc":"","ref":"EslNews.Handler.html#c:init/2","title":"EslNews.Handler.init/2","type":"callback"},{"doc":"Extract pagination params from URI query string. Examples iex&gt; EslNews.Handler.pagination_params(%{qs: &quot;page=4&amp;per=20&quot;}) {4, 20} iex&gt; EslNews.Handler.pagination_params(%{qs: &quot;page=-3&quot;}) {1, 10}","ref":"EslNews.Handler.html#pagination_params/1","title":"EslNews.Handler.pagination_params/1","type":"function"},{"doc":"Extract request params from path bindings and URI query string. For query string params, only the permitted values will be returned, and they will not override path binding values. Examples iex&gt; EslNews.Handler.request_params(%{qs: &quot;page=1&amp;per=10&quot;}, permit: [:page, :per]) %{page: &quot;1&quot;, per: &quot;10&quot;} iex&gt; EslNews.Handler.request_params(%{qs: &quot;page=1&amp;per=10&amp;id=4&quot;, bindings: %{id: &quot;1234&quot;}}, permit: [:page]) %{id: &quot;1234&quot;, page: &quot;1&quot;} iex&gt; EslNews.Handler.request_params(%{qs: &quot;page=1&amp;per=10&quot;}, permit: []) %{}","ref":"EslNews.Handler.html#request_params/2","title":"EslNews.Handler.request_params/2","type":"function"},{"doc":"","ref":"EslNews.Handler.html#c:resource_exists/2","title":"EslNews.Handler.resource_exists/2","type":"callback"},{"doc":"","ref":"EslNews.Handler.html#c:response/2","title":"EslNews.Handler.response/2","type":"callback"},{"doc":"Helper to convert a string param to integer","ref":"EslNews.Handler.html#to_integer/2","title":"EslNews.Handler.to_integer/2","type":"function"},{"doc":":cowboy_rest.switch_handler() type isn't exported by :cowboy_rest","ref":"EslNews.Handler.html#t:switch_handler/0","title":"EslNews.Handler.switch_handler/0","type":"type"},{"doc":"EslNews.Handlers.Stories provides a JSON response for the latest available Stories. Implements @behaviour for EslNews.Handler","ref":"EslNews.Handlers.Stories.html","title":"EslNews.Handlers.Stories","type":"module"},{"doc":"Only permit GET, HEAD and OPTIONS request methods for these endpoints","ref":"EslNews.Handlers.Stories.html#allowed_methods/2","title":"EslNews.Handlers.Stories.allowed_methods/2","type":"function"},{"doc":"Only permit &quot;application/json&quot; content-types for these endpoints","ref":"EslNews.Handlers.Stories.html#content_types_provided/2","title":"EslNews.Handlers.Stories.content_types_provided/2","type":"function"},{"doc":"Upgrade a basic :cowboy_handler middleware to the :cowboy_rest middleware","ref":"EslNews.Handlers.Stories.html#init/2","title":"EslNews.Handlers.Stories.init/2","type":"function"},{"doc":"Endpoint of the :cowboy_rest middleware chain. Renders the Stories list as JSON","ref":"EslNews.Handlers.Stories.html#response/2","title":"EslNews.Handlers.Stories.response/2","type":"function"},{"doc":":cowboy_rest.switch_handler() type isn't exported by :cowboy_rest","ref":"EslNews.Handlers.Stories.html#t:switch_handler/0","title":"EslNews.Handlers.Stories.switch_handler/0","type":"type"},{"doc":"EslNews.Handlers.Story provides a JSON response for a single Story resource. Implements @behaviour for EslNews.Handler","ref":"EslNews.Handlers.Story.html","title":"EslNews.Handlers.Story","type":"module"},{"doc":"Only permit GET, HEAD and OPTIONS request methods for these endpoints","ref":"EslNews.Handlers.Story.html#allowed_methods/2","title":"EslNews.Handlers.Story.allowed_methods/2","type":"function"},{"doc":"Only permit &quot;application/json&quot; content-types for these endpoints","ref":"EslNews.Handlers.Story.html#content_types_provided/2","title":"EslNews.Handlers.Story.content_types_provided/2","type":"function"},{"doc":"Upgrade a basic :cowboy_handler middleware to the :cowboy_rest middleware","ref":"EslNews.Handlers.Story.html#init/2","title":"EslNews.Handlers.Story.init/2","type":"function"},{"doc":":cowboy_rest middleware to abort a request with a 404 :not_found status if the Story ID doesn't exist","ref":"EslNews.Handlers.Story.html#resource_exists/2","title":"EslNews.Handlers.Story.resource_exists/2","type":"function"},{"doc":"Endpoint of the :cowboy_rest middleware chain. Renders the Story as JSON","ref":"EslNews.Handlers.Story.html#response/2","title":"EslNews.Handlers.Story.response/2","type":"function"},{"doc":":cowboy_rest.switch_handler() type isn't exported by :cowboy_rest","ref":"EslNews.Handlers.Story.html#t:switch_handler/0","title":"EslNews.Handlers.Story.switch_handler/0","type":"type"},{"doc":"EslNews.Handlers.Ws provides a JSON response for the latest available Stories through websockets. Implements @behaviour for EslNews.Websocket","ref":"EslNews.Handlers.Ws.html","title":"EslNews.Handlers.Ws","type":"module"},{"doc":"Upgrade a basic :cowboy_handler middleware to the :cowboy_websocket middleware","ref":"EslNews.Handlers.Ws.html#init/2","title":"EslNews.Handlers.Ws.init/2","type":"function"},{"doc":"Logs when a connection is terminated.","ref":"EslNews.Handlers.Ws.html#terminate/3","title":"EslNews.Handlers.Ws.terminate/3","type":"function"},{"doc":"Receives pings/data from the connection. Ignores and continues.","ref":"EslNews.Handlers.Ws.html#websocket_handle/2","title":"EslNews.Handlers.Ws.websocket_handle/2","type":"function"},{"doc":"Deliver JSON encoded list of stories to the websocket client every time the timer expires","ref":"EslNews.Handlers.Ws.html#websocket_info/2","title":"EslNews.Handlers.Ws.websocket_info/2","type":"function"},{"doc":"Log a successful connection and dispatch the initial call to websocket_info/2 after 10ms","ref":"EslNews.Handlers.Ws.html#websocket_init/1","title":"EslNews.Handlers.Ws.websocket_init/1","type":"function"},{"doc":":cowboy_websocket.call_result() type isn't exported by :cowboy_websocket","ref":"EslNews.Handlers.Ws.html#t:call_result/0","title":"EslNews.Handlers.Ws.call_result/0","type":"type"},{"doc":"EslNews.Http.Client fetches JSON objects from an HTTP API.","ref":"EslNews.Http.Client.html","title":"EslNews.Http.Client","type":"module"},{"doc":"Perform a GET request. See request/1 or request/2 for options definition. get ( &quot;/users&quot; ) get ( &quot;/users&quot; , query : [ scope : &quot;admin&quot; ] ) get ( client , &quot;/users&quot; ) get ( client , &quot;/users&quot; , query : [ scope : &quot;admin&quot; ] ) get ( client , &quot;/users&quot; , body : %{ name : &quot;Jon&quot; } )","ref":"EslNews.Http.Client.html#get/3","title":"EslNews.Http.Client.get/3","type":"function"},{"doc":"Perform a GET request. See request!/1 or request!/2 for options definition. get! ( &quot;/users&quot; ) get! ( &quot;/users&quot; , query : [ scope : &quot;admin&quot; ] ) get! ( client , &quot;/users&quot; ) get! ( client , &quot;/users&quot; , query : [ scope : &quot;admin&quot; ] ) get! ( client , &quot;/users&quot; , body : %{ name : &quot;Jon&quot; } )","ref":"EslNews.Http.Client.html#get!/3","title":"EslNews.Http.Client.get!/3","type":"function"},{"doc":"List of story IDs in order of popularity","ref":"EslNews.Http.Client.html#list/1","title":"EslNews.Http.Client.list/1","type":"function"},{"doc":"Available story list names","ref":"EslNews.Http.Client.html#lists/0","title":"EslNews.Http.Client.lists/0","type":"function"},{"doc":"Perform a request. Options :method - the request method, one of [ :head , :get , :delete , :trace , :options , :post , :put , :patch ] :url - either full url e.g. &quot; http://example.com/some/path&quot; or just &quot;/some/path&quot; if using Tesla.Middleware.BaseUrl :query - a keyword list of query params, e.g. [page: 1, per_page: 100] :headers - a keyworld list of headers, e.g. [{&quot;content-type&quot;, &quot;text/plain&quot;}] :body - depends on used middleware: by default it can be a binary if using e.g. JSON encoding middleware it can be a nested map if adapter supports it it can be a Stream with any of the above :opts - custom, per-request middleware or adapter options Examples ExampleApi . request ( method : :get , url : &quot;/users/path&quot; ) # use shortcut methods ExampleApi . get ( &quot;/users/1&quot; ) ExampleApi . post ( client , &quot;/users&quot; , %{ name : &quot;Jon&quot; } )","ref":"EslNews.Http.Client.html#request/2","title":"EslNews.Http.Client.request/2","type":"function"},{"doc":"Perform request and raise in case of error. This is similar to request/2 behaviour from Tesla 0.x See request/2 for list of available options.","ref":"EslNews.Http.Client.html#request!/2","title":"EslNews.Http.Client.request!/2","type":"function"},{"doc":"Raw JSON story struct","ref":"EslNews.Http.Client.html#story/1","title":"EslNews.Http.Client.story/1","type":"function"},{"doc":"Raw JSON user struct","ref":"EslNews.Http.Client.html#user/1","title":"EslNews.Http.Client.user/1","type":"function"},{"doc":"Options that may be passed to a request function. See request/2 for detailed descriptions.","ref":"EslNews.Http.Client.html#t:option/0","title":"EslNews.Http.Client.option/0","type":"type"},{"doc":"EslNews.Http.MockClient mimicks EslNews.Http.Client but loads its JSON objects from disk, instead of the network.","ref":"EslNews.Http.MockClient.html","title":"EslNews.Http.MockClient","type":"module"},{"doc":"List of story IDs in order of popularity","ref":"EslNews.Http.MockClient.html#list/1","title":"EslNews.Http.MockClient.list/1","type":"function"},{"doc":"Available story list names","ref":"EslNews.Http.MockClient.html#lists/0","title":"EslNews.Http.MockClient.lists/0","type":"function"},{"doc":"Raw JSON story struct","ref":"EslNews.Http.MockClient.html#story/1","title":"EslNews.Http.MockClient.story/1","type":"function"},{"doc":"Raw JSON user struct","ref":"EslNews.Http.MockClient.html#user/1","title":"EslNews.Http.MockClient.user/1","type":"function"},{"doc":"EslNews.Http.SyncItems","ref":"EslNews.Http.SyncItems.html","title":"EslNews.Http.SyncItems","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EslNews.Http.SyncItems.html#child_spec/1","title":"EslNews.Http.SyncItems.child_spec/1","type":"function"},{"doc":"GenServer.cast/2 callback. :set_attempts Update the number of attempts worker has made to obtain a valid {list, item_id} tuple.","ref":"EslNews.Http.SyncItems.html#handle_cast/2","title":"EslNews.Http.SyncItems.handle_cast/2","type":"function"},{"doc":"On every :sync_tick timeout, obtain a {list, item_id} tuple to be updated and pass it to sync_item/2 .","ref":"EslNews.Http.SyncItems.html#handle_info/2","title":"EslNews.Http.SyncItems.handle_info/2","type":"function"},{"doc":"Initialize by dispatching the initial call to :sync_tick","ref":"EslNews.Http.SyncItems.html#init/1","title":"EslNews.Http.SyncItems.init/1","type":"function"},{"doc":"","ref":"EslNews.Http.SyncItems.html#start_link/1","title":"EslNews.Http.SyncItems.start_link/1","type":"function"},{"doc":"Process a {list, item_id} tuple. Load existing EslNews.Store.Story struct or create an empty stub. Ignore if item has been processed, otherwise fetch from HTTP endpoint and update in :mnesia . If the HTTP request fails, re-enqueue the {list, item_id} tuple with EslNews.Http.SyncLists.push_item/2 to process it again. Worker timer backs off after 3 nil items were obtained, from @sync_tic_ms to @sync_empty_tick_ms","ref":"EslNews.Http.SyncItems.html#sync_item/2","title":"EslNews.Http.SyncItems.sync_item/2","type":"function"},{"doc":"EslNews.Http.SyncLists","ref":"EslNews.Http.SyncLists.html","title":"EslNews.Http.SyncLists","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EslNews.Http.SyncLists.html#child_spec/1","title":"EslNews.Http.SyncLists.child_spec/1","type":"function"},{"doc":"GenServer.call/2 callback. :pull_item Obtain next {list, item_id} tuple and remove it from state","ref":"EslNews.Http.SyncLists.html#handle_call/3","title":"EslNews.Http.SyncLists.handle_call/3","type":"function"},{"doc":"GenServer.cast/2 callback. :push_item Insert a {list, item_id} tuple into state. :sync_list Fetch list item IDs from HTTP endpoint and keep only the first @sync_items_count entries. Save the entries to a temporary upcoming EslNews.Store.List , and then create empty stub EslNews.Store.Story for each ID before pushing the ID into the processing queue. :sweep_list Fetch list item IDs from an upcoming list and hydrate them into EslNews.Store.Story structs. Ensure no stub structs remain by checking their type attribute and once all are set, save the upcoming list as the current list. Finally, delete the upcoming list to prepare for the next sync cycle.","ref":"EslNews.Http.SyncLists.html#handle_cast/2","title":"EslNews.Http.SyncLists.handle_cast/2","type":"function"},{"doc":"On every :sync_tick timeout, enqueue all lists to be updated and set a new timer.","ref":"EslNews.Http.SyncLists.html#handle_info/2","title":"EslNews.Http.SyncLists.handle_info/2","type":"function"},{"doc":"Initialize by dispatching the initial call to :sync_tick","ref":"EslNews.Http.SyncLists.html#init/1","title":"EslNews.Http.SyncLists.init/1","type":"function"},{"doc":"Dequeue an {list, item_id} tuple for processing. nil if no tuples remain.","ref":"EslNews.Http.SyncLists.html#pull_item/0","title":"EslNews.Http.SyncLists.pull_item/0","type":"function"},{"doc":"Enqueue a {list, item_id} tuple for processing.","ref":"EslNews.Http.SyncLists.html#push_item/2","title":"EslNews.Http.SyncLists.push_item/2","type":"function"},{"doc":"","ref":"EslNews.Http.SyncLists.html#start_link/1","title":"EslNews.Http.SyncLists.start_link/1","type":"function"},{"doc":"Verify that all items in an upcoming list have been fetched and convert it to the current items list.","ref":"EslNews.Http.SyncLists.html#sweep_list/1","title":"EslNews.Http.SyncLists.sweep_list/1","type":"function"},{"doc":"Enqueue a list name to fetch from the API as an upcoming items list.","ref":"EslNews.Http.SyncLists.html#sync_list/1","title":"EslNews.Http.SyncLists.sync_list/1","type":"function"},{"doc":"EslNews.Logger provides logging helpers for EslNews.Handlers","ref":"EslNews.Logger.html","title":"EslNews.Logger","type":"module"},{"doc":"Log a simple value with timestamp","ref":"EslNews.Logger.html#info/1","title":"EslNews.Logger.info/1","type":"function"},{"doc":"Log a :cowboy_req with a timestamp, method, path and optionally the query params","ref":"EslNews.Logger.html#request/2","title":"EslNews.Logger.request/2","type":"function"},{"doc":"Log the Story in a request state with a timestamp, the Story ID and title","ref":"EslNews.Logger.html#resource/1","title":"EslNews.Logger.resource/1","type":"function"},{"doc":"Log a :cowboy_websocket callback with a timestamp, frame data, and state","ref":"EslNews.Logger.html#ws/2","title":"EslNews.Logger.ws/2","type":"function"},{"doc":"Log a :cowboy_websocket frame","ref":"EslNews.Logger.html#ws_frame/1","title":"EslNews.Logger.ws_frame/1","type":"function"},{"doc":"Log a :cowboy_websocket state","ref":"EslNews.Logger.html#ws_state/1","title":"EslNews.Logger.ws_state/1","type":"function"},{"doc":"EslNews.Router defines the routes and handlers required to generate the :cowboy_router.dispatch_rules() required by the :cowboy webserver.","ref":"EslNews.Router.html","title":"EslNews.Router","type":"module"},{"doc":"Compile routes and return :cowboy_router.dispatch_rules()","ref":"EslNews.Router.html#dispatch/0","title":"EslNews.Router.dispatch/0","type":"function"},{"doc":"Define routes and handler modules.","ref":"EslNews.Router.html#routes/0","title":"EslNews.Router.routes/0","type":"function"},{"doc":"EslNews.Store.List provides a :mnesia schema and struct to store EslNews.Store.List objects, as well as helper methods to interact with the storage table.","ref":"EslNews.Store.List.html","title":"EslNews.Store.List","type":"module"},{"doc":"List all existing EslNews.Store.List records","ref":"EslNews.Store.List.html#all/0","title":"EslNews.Store.List.all/0","type":"function"},{"doc":"Persist an EslNews.Store.List in :mnesia","ref":"EslNews.Store.List.html#create/1","title":"EslNews.Store.List.create/1","type":"function"},{"doc":"Decode a :mnesia record tuple into an EslNews.Store.List struct Examples iex&gt; EslNews.Store.List . decode ( { EslNews.Store.List , :topstories , [ 4 , 2 , 3 , 1 ] , 54321 } ) % EslNews.Store.List { id : :topstories , items : [ 4 , 2 , 3 , 1 ] , time : 54321 }","ref":"EslNews.Store.List.html#decode/1","title":"EslNews.Store.List.decode/1","type":"function"},{"doc":"Delete an EslNews.Store.List stored in :mnesia","ref":"EslNews.Store.List.html#delete/1","title":"EslNews.Store.List.delete/1","type":"function"},{"doc":"Encode an EslNews.Store.List struct into a :mnesia record tuple Examples iex&gt; EslNews.Store.List . encode ( % EslNews.Store.List { id : :topstories , items : [ 4 , 2 , 3 , 1 ] , time : 54321 } ) { EslNews.Store.List , :topstories , [ 4 , 2 , 3 , 1 ] , 54321 }","ref":"EslNews.Store.List.html#encode/1","title":"EslNews.Store.List.encode/1","type":"function"},{"doc":"Load an EslNews.Store.List stored in :mnesia or return :not_found","ref":"EslNews.Store.List.html#find/1","title":"EslNews.Store.List.find/1","type":"function"},{"doc":"Available story list names","ref":"EslNews.Store.List.html#lists/0","title":"EslNews.Store.List.lists/0","type":"function"},{"doc":"Attributes list for :mnesia table schema definition. :id must always be the first attribute","ref":"EslNews.Store.List.html#schema_attrs/0","title":"EslNews.Store.List.schema_attrs/0","type":"function"},{"doc":"Zero-based list of attribute positions to be indexed for :mnesia table schema definition. :id is indexed by default, will not be included","ref":"EslNews.Store.List.html#schema_indices/1","title":"EslNews.Store.List.schema_indices/1","type":"function"},{"doc":"EslNews.Store.List record tuple type","ref":"EslNews.Store.List.html#t:r/0","title":"EslNews.Store.List.r/0","type":"type"},{"doc":"EslNews.Store.List struct type","ref":"EslNews.Store.List.html#t:t/0","title":"EslNews.Store.List.t/0","type":"type"},{"doc":"EslNews.Store.Schema sets up the :mnesia application and creates tables for EslNews.Store.List and EslNews.Store.Story .","ref":"EslNews.Store.Schema.html","title":"EslNews.Store.Schema","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EslNews.Store.Schema.html#child_spec/1","title":"EslNews.Store.Schema.child_spec/1","type":"function"},{"doc":"Initialize :mnesia . Create schema on the current node. Start :mnesia Create tables for EslNews.Store.List and EslNews.Store.Story Wait for table setup to complete before continuing","ref":"EslNews.Store.Schema.html#init/1","title":"EslNews.Store.Schema.init/1","type":"function"},{"doc":"","ref":"EslNews.Store.Schema.html#start_link/1","title":"EslNews.Store.Schema.start_link/1","type":"function"},{"doc":"Force execution to pause while table setup completes.","ref":"EslNews.Store.Schema.html#wait_for_tables/0","title":"EslNews.Store.Schema.wait_for_tables/0","type":"function"},{"doc":"EslNews.Store.Story provides a mnesia schema and struct to store EslNews.Store.Story objects, as well as helper methods to interact with the storage table.","ref":"EslNews.Store.Story.html","title":"EslNews.Store.Story","type":"module"},{"doc":"All existing EslNews.Store.Story records","ref":"EslNews.Store.Story.html#all/0","title":"EslNews.Store.Story.all/0","type":"function"},{"doc":"All existing EslNews.Store.Story records for an EslNews.Store.List or list of IDs","ref":"EslNews.Store.Story.html#all/1","title":"EslNews.Store.Story.all/1","type":"function"},{"doc":"Persist an EslNews.Store.Story in :mnesia","ref":"EslNews.Store.Story.html#create/1","title":"EslNews.Store.Story.create/1","type":"function"},{"doc":"Decode a :mnesia record tuple into an EslNews.Store.Story struct Examples iex&gt; EslNews.Store.Story . decode ( { EslNews.Store.Story , 1 , &quot;Author&quot; , 0 , 0 , 0 , &quot;Title&quot; , &quot;story&quot; , nil } ) % EslNews.Store.Story { id : 1 , by : &quot;Author&quot; , descendants : 0 , score : 0 , time : 0 , type : &quot;story&quot; , title : &quot;Title&quot; , url : nil }","ref":"EslNews.Store.Story.html#decode/1","title":"EslNews.Store.Story.decode/1","type":"function"},{"doc":"Delete an EslNews.Store.Story stored in :mnesia","ref":"EslNews.Store.Story.html#delete/1","title":"EslNews.Store.Story.delete/1","type":"function"},{"doc":"Encode an EslNews.Store.Story struct into a :mnesia record tuple Examples iex&gt; EslNews.Store.Story . encode ( % EslNews.Store.Story { id : 1 , type : &quot;story&quot; , title : &quot;Title&quot; , by : &quot;Author&quot; } ) { EslNews.Store.Story , 1 , &quot;Author&quot; , nil , nil , nil , &quot;Title&quot; , &quot;story&quot; , nil }","ref":"EslNews.Store.Story.html#encode/1","title":"EslNews.Store.Story.encode/1","type":"function"},{"doc":"Load an EslNews.Store.Story stored in :mnesia or return :not_found","ref":"EslNews.Store.Story.html#find/1","title":"EslNews.Store.Story.find/1","type":"function"},{"doc":"Update an existing EslNews.Store.Story in :mnesia","ref":"EslNews.Store.Story.html#save/1","title":"EslNews.Store.Story.save/1","type":"function"},{"doc":"Attributes list for :mnesia table schema definition. :id must always be the first attribute","ref":"EslNews.Store.Story.html#schema_attrs/0","title":"EslNews.Store.Story.schema_attrs/0","type":"function"},{"doc":"Zero-based list of attribute positions to be indexed for :mnesia table schema definition. :id is indexed by default, will not be included","ref":"EslNews.Store.Story.html#schema_indices/1","title":"EslNews.Store.Story.schema_indices/1","type":"function"},{"doc":"EslNews.Store.Story record tuple type","ref":"EslNews.Store.Story.html#t:r/0","title":"EslNews.Store.Story.r/0","type":"type"},{"doc":"EslNews.Store.Story struct type","ref":"EslNews.Store.Story.html#t:t/0","title":"EslNews.Store.Story.t/0","type":"type"},{"doc":"EslNews.Websocket provides a standard base implementing the :cowboy_websocket behaviour and URI param extraction for EslNews.Handlers","ref":"EslNews.Websocket.html","title":"EslNews.Websocket","type":"behaviour"},{"doc":"","ref":"EslNews.Websocket.html#c:init/2","title":"EslNews.Websocket.init/2","type":"callback"},{"doc":"","ref":"EslNews.Websocket.html#c:terminate/3","title":"EslNews.Websocket.terminate/3","type":"callback"},{"doc":"","ref":"EslNews.Websocket.html#c:websocket_handle/2","title":"EslNews.Websocket.websocket_handle/2","type":"callback"},{"doc":"","ref":"EslNews.Websocket.html#c:websocket_info/2","title":"EslNews.Websocket.websocket_info/2","type":"callback"},{"doc":"","ref":"EslNews.Websocket.html#c:websocket_init/1","title":"EslNews.Websocket.websocket_init/1","type":"callback"},{"doc":":cowboy_websocket.call_result() type isn't exported by :cowboy_websocket","ref":"EslNews.Websocket.html#t:call_result/0","title":"EslNews.Websocket.call_result/0","type":"type"},{"doc":"EslNews works as an aggeregator for Hacker News stories, fetching data from the HN API for further analysis or consumption. Documentation for EslNews is available at https://sdrew.github.io/esl-news/ Documentation for the HN API is available at https://github.com/HackerNews/API ### Basic Features Fetch the 50 top stories every 5 minutes. Makes stories available via two public APIs JSON over HTTP JSON over WebSockets EslNews tries to make use of the fewest external dependencies, without being too inconvenient. ### Public APIs /api/stories The endpoint accepts pagination parameters for the most recent list of stories. page - Default: 1 per - Default: 10 /api/stories/[:story_id] Display JSON for a single story /api/ws The WebSockets endpoint delivers the most recent 50 stories. The list is re-sent to the client every 20 seconds, including any story updates. ### Storage EslNews requires no external storage, all stories are stored in memory using :mnesia . ### Web server EslNews provides a webserver directly using :cowboy , and includes a simple Javascript WebSockets client to display stories on the homepage ( / ) for testing. ### Workers EslNews.Http.SyncLists will update the list of story IDs using the HN API every 5 minutes. It will then push these story IDs into a processing queue for EslNews.Http.SyncItems EslNews.Http.SyncItems will update each story using the HN API. Existing stories will not be re-fetched. Multiple workers will be spawned by the supervisor depending on MIX_ENV :dev 4 workers :prod 10 workers","ref":"readme.html","title":"EslNews","type":"extras"}]